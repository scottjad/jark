#!/bin/bash

VERSION="TMPL_VERSION"
BUILD_DATE="TMPL_DATE"

MOD=$1
CLJR_ROOT="$HOME/.cljr"
CLJR_CP="$HOME/.cljr/lib"
CLJR_BIN="$HOME/.cljr/bin"

ARCH=`uname -m`

readlink_e() {
    self="$0"
    while test -h "$self"; do
	cd "$(dirname $self)"
	self=`readlink "$self"`
    done
    cd "$(dirname $self)"
    pwd
}

JARK=$(readlink_e)/jark || jark

if [ -e "${CLJR_CP}/jark-${VERSION}.jar" ]; then
    JARK_JAR="${CLJR_CP}/jark-${VERSION}.jar"
else
    JARK_JAR="${CLJR_CP}/jark.jar"
fi

CLOJURE_JARS="${CLJR_CP}/clojure-1.2.0.jar:${CLJR_CP}/clojure-contrib-1.2.0.jar"
DEP_JARS="${CLJR_CP}/nailgun-0.7.1.jar:${CLJR_CP}/swank-clojure-1.2.0.jar:${CLJR_CP}/classpath-manager-1.1.0.jar"

JARK_CP="${CLOJURE_JARS}:${DEP_JARS}:${JARK_JAR}:"
JARK_MODULES_DIR="${CLJR_CP}/jark"
JARK_BIN="${CLJR_BIN}/ng"

# some cleanups

get_pid() {
    if [ -e /tmp/jark.pid ]; then
        p=$(cat /tmp/jark.pid)
        if [ $p ]; then
            echo $p
        else
            echo 0
        fi
    else
        echo 0
    fi
}

get_port() {
    if [ -e /tmp/jark.port ]; then
        p=$(cat /tmp/jark.port)
        if [ $p ]; then
            echo $p
        else
            echo 0
        fi
    else
        echo 0
    fi
}

get_client() {
    if [ -e /tmp/jark.client ]; then
        p=$(cat /tmp/jark.client)
        if [ "$p" ]; then
            echo "$p"
        else
            echo 0
        fi
    else
        echo 0
    fi
}


get_ns() {
    if [ -e /tmp/jark.ns ]; then
        p=$(cat /tmp/jark.ns)
        if [ "$p" ]; then
            echo "$p"
        else
            echo "user"
        fi
    else
        echo "user"
    fi
}


is_jark_running() {
    $(get_client) jark.core jark._stat uptime &> /dev/null
    if [ $? == "0" ]; then
        echo "yes"
    else
        echo "no"
    fi
}

running=`is_jark_running`
JARK_CLIENT=$(get_client)

if [ -e "$1" ]; then
    if [ "$running" == "no" ]; then
        jark vm start 2&> /dev/null
        jark ns load $1
    fi
    LNS=`jark ns load $1`
    NS=`echo $LNS | cut -d '/' -f 1 | cut -d "'" -f 2`
    jark $NS  -main "${@:2}" 
    exit 0
fi

if [ "$1"  == "repl" ]; then
    # TODO: remember last used repl
    if [ -z $2 ]; then
        LAST_REPL=$(get_ns)
    else
        LAST_REPL=$2
    fi
    jark ns repl ${LAST_REPL}
    exit 0
fi

if [ "$1"  == "run" ]; then
    if [ -z $2 ]; then
        MAIN="clojure.main"
    else
        MAIN=$2
    fi
    jark cp run ${MAIN}
    exit 0
fi

if [ "$1"  == "version" ]; then
    echo "git hash: $VERSION"
    echo "build: $BUILD_DATE"
    exit 0
fi

if [ "$1"  == "--version" ]; then
    echo "git hash: $VERSION"
    echo "build: $BUILD_DATE"
    exit 0
fi

#exports
export JARK
export JARK_JAR
export DEP_JARS
export JARK_CP
export JARK_CLIENT
export CLJR_ROOT
export CLJR_CP
export CLJR_BIN
export running
export VERSION
export JARK_MODULES_DIR

mkdir -p ${CLJR_CP}
mkdir -p ${CLJR_BIN}
mkdir -p ${JARK_MODULES_DIR}

extract() {
    export TMPDIR=`mktemp -d /tmp/jark.XXXXXX`
    ARCHIVE=`awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0; }' $0`
    tail -n+$ARCHIVE $0 | tar xz -C $TMPDIR
    CDIR=`pwd`
    cd $TMPDIR

    cp -av lib/*.jar ${CLJR_CP}/
    cp -av *.jar ${CLJR_CP}/
    cp -av bin/ng-${ARCH} ${JARK_BIN}
    cp -av bin/shflags ${CLJR_BIN}/
    cp -av bin/clj_completions ${CLJR_BIN}/
    cp -av bin/project-cljr.clj ${CLJR_ROOT}/project.clj

    chmod +x ${JARK_BIN}
    cp -av modules/* ${JARK_MODULES_DIR}/
    cp jark-deps.txt ${CLJR_CP}/
    
    cd $CDIR
    rm -rf $TMPDIR
    echo "Installed successfully."
    exit 0
}


if [ -z $1 ]; then
    echo "USAGE: `basename $0` MODULE COMMAND [ARGS]"
    if [ $running == "no" ]; then
        echo "Vm is not running, run jark vm start"
        exit 1
    fi
    echo -en "\e[00;34mAvailable modules:\e[00m\n"
    for i in `ls ${JARK_MODULES_DIR}/*.*`; do 
        MODULE=`basename $i | cut -d '.' -f 1` 
        EXT=`basename $i | cut -d '.' -f 2` 
        if [ "$EXT" == "sh" ]; then
            source $i
            echo -en "$MODULE\t- $(commands)\n"
            
        fi

        if [ "$EXT" == "clj" ]; then
            if [[ $MODULE == _* ]]; then 
                continue 
            fi
            if [ $running == "yes" ]; then
                $JARK_CLIENT jark.core jark.core jark-load $i 2&> /dev/null
                echo -en "$MODULE\t- `$JARK_CLIENT jark.core jark.core about jark.${MODULE} | head -n1 | awk 'sub("....$", "")'`\n"
            fi
        fi

    done
    exit 0

fi    

if [ $MOD == "self" ] && [ $2 == "install" ]; then
    extract
fi

MODULE_SH=${JARK_MODULES_DIR}/$MOD.sh
MODULE_CLJ=${JARK_MODULES_DIR}/$MOD.clj

if [ -e ${MODULE_SH} ]; then
    source ${MODULE_SH}
    ${2} "${@:3}"
elif [ -e ${MODULE_CLJ} ]; then
    MODULE=`basename ${MODULE_CLJ} | cut -d '.' -f 1` 
    $JARK_CLIENT jark.core jark.core jark-load ${MODULE_CLJ} 2&> /dev/null
    $JARK_CLIENT jark.core jark.core jark-compile ${JARK_MODULES_DIR} jark.${MODULE} 2&> /dev/null
    $JARK_CLIENT jark.core jark.${MODULE} "${@:2}"
else
    $JARK_CLIENT jark.core "${@:1}"
fi

exit 0

__ARCHIVE_BELOW__
